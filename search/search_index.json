{"config":{"indexing":"full","lang":["en"],"min_search_length":3,"prebuild_index":false,"separator":"[\\s\\-]+"},"docs":[{"location":"","text":"Welcome to Pynamo Pynamo computes flexural (bending) mode shapes and frequencies of composite beam models like towers or cantilever beams. Models comprise of multiple beams with masses, springs and boundary conditions. License Pynamo is free software licensed under the GNU Public License. Liability Disclaimer The tool is offered without any warranty (guarantee) or liability. The user is responsible for any damage resulting from the installation, setup or use of the software. All programming was done with the utmost accuracy. However, bugs might exist that possibly lead to false results or unexpected behavior. Engineering Please understand that no detailed engineering instructions can be provided with the tool. It is assumed that the user knows the engineering basics to understand configuration of models and what certain terms mean.","title":"Home"},{"location":"#welcome-to-pynamo","text":"Pynamo computes flexural (bending) mode shapes and frequencies of composite beam models like towers or cantilever beams. Models comprise of multiple beams with masses, springs and boundary conditions.","title":"Welcome to Pynamo"},{"location":"#license","text":"Pynamo is free software licensed under the GNU Public License.","title":"License"},{"location":"#liability-disclaimer","text":"The tool is offered without any warranty (guarantee) or liability. The user is responsible for any damage resulting from the installation, setup or use of the software. All programming was done with the utmost accuracy. However, bugs might exist that possibly lead to false results or unexpected behavior.","title":"Liability Disclaimer"},{"location":"#engineering","text":"Please understand that no detailed engineering instructions can be provided with the tool. It is assumed that the user knows the engineering basics to understand configuration of models and what certain terms mean.","title":"Engineering"},{"location":"example/","text":"Example This example illustrates how to run the tool. Download Model File The model is defined in this JSON file: wind_tower_2.json Download that file (right-click \u2192 Save As ) to a folder on your computer. We assume for this example C:\\temp\\wind_tower_2.json as location. Run Computation The output will be written to C:\\temp\\wind_tower_2_out.xlsx . If you run the Windows executable call: pynamo.exe C:\\temp\\wind_tower_2.json C:\\temp\\wind_tower_2_out.xlsx If you run over the Python interpreter call: python pynamo.py C:\\temp\\wind_tower_2.json C:\\temp\\wind_tower_2_out.xlsx The output looks similar to this: JSON input: C:\\temp\\wind_tower_2.json Excel output: C:\\temp\\wind_tower_2_out.xlsx Executing: Verifying Files Reading \"C:\\temp\\wind_tower_2.json\" Computing frequencies and mode shapes Writing \"C:\\temp\\wind_tower_2_out.xlsx\" Done! Note : Output might deviate depending on the tool version. That's it! Open the output file and review the results.","title":"Example"},{"location":"example/#example","text":"This example illustrates how to run the tool.","title":"Example"},{"location":"example/#download-model-file","text":"The model is defined in this JSON file: wind_tower_2.json Download that file (right-click \u2192 Save As ) to a folder on your computer. We assume for this example C:\\temp\\wind_tower_2.json as location.","title":"Download Model File"},{"location":"example/#run-computation","text":"The output will be written to C:\\temp\\wind_tower_2_out.xlsx . If you run the Windows executable call: pynamo.exe C:\\temp\\wind_tower_2.json C:\\temp\\wind_tower_2_out.xlsx If you run over the Python interpreter call: python pynamo.py C:\\temp\\wind_tower_2.json C:\\temp\\wind_tower_2_out.xlsx The output looks similar to this: JSON input: C:\\temp\\wind_tower_2.json Excel output: C:\\temp\\wind_tower_2_out.xlsx Executing: Verifying Files Reading \"C:\\temp\\wind_tower_2.json\" Computing frequencies and mode shapes Writing \"C:\\temp\\wind_tower_2_out.xlsx\" Done! Note : Output might deviate depending on the tool version. That's it! Open the output file and review the results.","title":"Run Computation"},{"location":"input/","text":"Input The run configuration is defined in a JSON file. That includes project data, computation settings and the engineering model. Model Definition A simple JSON definition can look like this (compact formatting): { \"header\": { \"user\": \"Jane Doe\", \"project\": \"example user manual\", \"site\": \"The fallen Rocks\", \"state\": \"Wyoming\" }, \"parameters\": { \"p_delta\": true, \"prefer_positive_lateral_mode_shape_values\": false, \"number_of_modes\": 5, \"normalize_mode_shapes\": true, \"gravity\": 9.81 }, \"model\": { \"beam_type\": \"B_2DOF_II\", \"dofs\": [{\"x\": 0.0, \"w\": 0.0, \"phi\": 0.0}], \"springs\": [{\"x\": 0.0, \"w\": 1.2e6, \"phi\": 5.0e7}], \"masses\": [ {\"x\": 1.0, \"mass\": 4000.0}, {\"x\": 2.0, \"mass\": 4000.0}, {\"x\": 3.0, \"mass\": 4000.0}, {\"x\": 4.0, \"mass\": 4000.0}, {\"x\": 5.0, \"mass\": 4000.0} ], \"beams\": [ {\"length\":1.0, \"area\":0.0, \"area_moi\":8.356e-5, \"mass\":2.5, \"e_modul\": 2.1e+11}, {\"length\":1.0, \"area\":0.0, \"area_moi\":8.356e-5, \"mass\":2.5, \"e_modul\": 2.1e+11}, {\"length\":1.0, \"area\":0.0, \"area_moi\":8.356e-5, \"mass\":2.5, \"e_modul\": 2.1e+11}, {\"length\":1.0, \"area\":0.0, \"area_moi\":8.356e-5, \"mass\":2.5, \"e_modul\": 2.1e+11}, {\"length\":1.0, \"area\":0.0, \"area_moi\":8.356e-5, \"mass\":2.5, \"e_modul\": 2.1e+11} ] } } The object structure of the above example must be followed. Parameters Computation parameters control the computation and are defined by the \"parameters\" entry. Following parameters are supported: \"p_delta\" : true to include pDelta effects for computation of mode shapes and frequencies, otherwise false \"prefer_positive_lateral_mode_shape_values\" : true to prefer positive mode shapes (e.g. the normalized first modes maximum phi will be 1.0 instead of -1.0 ), otherwise false \"number_of_modes\" : number of modes for which to compute mode shapes and frequencies \"normalize_mode_shapes\" : true to normalize mode shapes to 1.0 , otherwise false \"gravity\" : earth acceleration Model Definition The model definition, \"model\" , is split in sub-entries: \"beam_type\" defines the beam type \"dofs\" are the boundary conditions \"springs\" is used to define springs \"beams\" defines the beams in order Springs and boundary conditions are optional, however at least one must be provided. User Entries In the JSON example \"header\" is an optional user entry. These entries serve the purpose of writing meta information into the result file for better traceability. The following rules apply to user entries: Data of user entries will not be used in the computation All sub-entries in a user entry can only be name , value pairs Theoretically, there is no limitation on the number of user entries. A sheet will be included in the result file for each user entry with a simple name , value table. This table will be included in sheet the \"header\" for the above JSON file: value user Jane Doe project user manual site The fallen Rocks state Wyoming","title":"Input"},{"location":"input/#input","text":"The run configuration is defined in a JSON file. That includes project data, computation settings and the engineering model.","title":"Input"},{"location":"input/#model-definition","text":"A simple JSON definition can look like this (compact formatting): { \"header\": { \"user\": \"Jane Doe\", \"project\": \"example user manual\", \"site\": \"The fallen Rocks\", \"state\": \"Wyoming\" }, \"parameters\": { \"p_delta\": true, \"prefer_positive_lateral_mode_shape_values\": false, \"number_of_modes\": 5, \"normalize_mode_shapes\": true, \"gravity\": 9.81 }, \"model\": { \"beam_type\": \"B_2DOF_II\", \"dofs\": [{\"x\": 0.0, \"w\": 0.0, \"phi\": 0.0}], \"springs\": [{\"x\": 0.0, \"w\": 1.2e6, \"phi\": 5.0e7}], \"masses\": [ {\"x\": 1.0, \"mass\": 4000.0}, {\"x\": 2.0, \"mass\": 4000.0}, {\"x\": 3.0, \"mass\": 4000.0}, {\"x\": 4.0, \"mass\": 4000.0}, {\"x\": 5.0, \"mass\": 4000.0} ], \"beams\": [ {\"length\":1.0, \"area\":0.0, \"area_moi\":8.356e-5, \"mass\":2.5, \"e_modul\": 2.1e+11}, {\"length\":1.0, \"area\":0.0, \"area_moi\":8.356e-5, \"mass\":2.5, \"e_modul\": 2.1e+11}, {\"length\":1.0, \"area\":0.0, \"area_moi\":8.356e-5, \"mass\":2.5, \"e_modul\": 2.1e+11}, {\"length\":1.0, \"area\":0.0, \"area_moi\":8.356e-5, \"mass\":2.5, \"e_modul\": 2.1e+11}, {\"length\":1.0, \"area\":0.0, \"area_moi\":8.356e-5, \"mass\":2.5, \"e_modul\": 2.1e+11} ] } } The object structure of the above example must be followed.","title":"Model Definition"},{"location":"input/#parameters","text":"Computation parameters control the computation and are defined by the \"parameters\" entry. Following parameters are supported: \"p_delta\" : true to include pDelta effects for computation of mode shapes and frequencies, otherwise false \"prefer_positive_lateral_mode_shape_values\" : true to prefer positive mode shapes (e.g. the normalized first modes maximum phi will be 1.0 instead of -1.0 ), otherwise false \"number_of_modes\" : number of modes for which to compute mode shapes and frequencies \"normalize_mode_shapes\" : true to normalize mode shapes to 1.0 , otherwise false \"gravity\" : earth acceleration","title":"Parameters"},{"location":"input/#model-definition_1","text":"The model definition, \"model\" , is split in sub-entries: \"beam_type\" defines the beam type \"dofs\" are the boundary conditions \"springs\" is used to define springs \"beams\" defines the beams in order Springs and boundary conditions are optional, however at least one must be provided.","title":"Model Definition"},{"location":"input/#user-entries","text":"In the JSON example \"header\" is an optional user entry. These entries serve the purpose of writing meta information into the result file for better traceability. The following rules apply to user entries: Data of user entries will not be used in the computation All sub-entries in a user entry can only be name , value pairs Theoretically, there is no limitation on the number of user entries. A sheet will be included in the result file for each user entry with a simple name , value table. This table will be included in sheet the \"header\" for the above JSON file: value user Jane Doe project user manual site The fallen Rocks state Wyoming","title":"User Entries"},{"location":"installation/","text":"Installation and Execution Two options for installation are available. Download of the Windows executable package or run the code directly with the Python interpreter. Ladder works with any operating system that supports Python . Command Line Pynamo is a console program. That means it must be executed from the command line like a shell or terminal. Windows Executable The tool can be downloaded as Windows executable at pynamo_1_0_0.zip . This does not require the installation of Python and should work as is. To execute the tool change into the folder where pynamo.exe is located and call pynamo -h This will print the help message. Python Interpreter Clone or download the repo under https://github.com/xtoeffel/pynamo . Make sure to download the master branch. Other branches are likely under development and should not be used for computations. Python must be installed on your system. Anaconda Individual is a good choice. Build the required environment named pynamo by: conda env create -f environment.yml The file environment.yml is located in the root folder of the repository. Before you start the tool make sure that this environment is activated. conda activate pynamo Now you are ready to start the tool by: python pynamo -h This will print the help message.","title":"Installation"},{"location":"installation/#installation-and-execution","text":"Two options for installation are available. Download of the Windows executable package or run the code directly with the Python interpreter. Ladder works with any operating system that supports Python .","title":"Installation and Execution"},{"location":"installation/#command-line","text":"Pynamo is a console program. That means it must be executed from the command line like a shell or terminal.","title":"Command Line"},{"location":"installation/#windows-executable","text":"The tool can be downloaded as Windows executable at pynamo_1_0_0.zip . This does not require the installation of Python and should work as is. To execute the tool change into the folder where pynamo.exe is located and call pynamo -h This will print the help message.","title":"Windows Executable"},{"location":"installation/#python-interpreter","text":"Clone or download the repo under https://github.com/xtoeffel/pynamo . Make sure to download the master branch. Other branches are likely under development and should not be used for computations. Python must be installed on your system. Anaconda Individual is a good choice. Build the required environment named pynamo by: conda env create -f environment.yml The file environment.yml is located in the root folder of the repository. Before you start the tool make sure that this environment is activated. conda activate pynamo Now you are ready to start the tool by: python pynamo -h This will print the help message.","title":"Python Interpreter"},{"location":"model/","text":"Model A simple FE-Model is used for the computation. The model consists of multiple beams. Beams are connected by nodes. A single beam is defined by: start, end node length area, A elastic modulus, E area moment of inertia, I mass, m Units The tool works unit independent. That means all values must be provided in compatible units - for instance: if length is in m then A must be in m 2 if mass is in kg and length in m , then gravity must be in m/s 2 and forces in N . Coordinate Systems The overall coordinate system (CSYS) is shown below. The beam axis is x . Nodes have their own CSYS according to the below figure. Both systems overlay: x = u z = w rotation around y = phi Beam Types Available beam types are: B_2DOF Bernoulli beam start and end node with 2 DOF: w , phi B_2DOF_II Bernoulli beam start and end node with 2 DOF: w , phi support of pDelta effects Best option is to use B_2DOF_II for all computations as allows to toggle the pDelta effect on and off without modification of the model definition. Note: Beam types cannot be mixed within a model. Mass Elements Masses are defined by: coordinate on the x-axis: \"x\" mass value: \"mass\" mass moment of inertia: \"mmoi\" Masses are assigned to the node closest to the specified x -coordinate. It is allowed to define multiple masses at the same location x ; their effect will be combined. Springs Springs are defined by: coordinate on the x-axis: \"x\" translational spring value: \"w\" rotational spring value: \"phi\" Springs must be defined at exact node locations. Boundary Conditions Boundary conditions are defined by: coordinate on the x-axis: \"x\" value for: \"w\": 0.0 , \"phi\": 0.0 Boundary conditions must be defined at exact node locations. Values must be set to 0.0 , otherwise the BC will not be applied correctly. Note : It is allowed to define springs and BC for the same node ( x -location). However, the BC will always override the spring.","title":"Engineering Model"},{"location":"model/#model","text":"A simple FE-Model is used for the computation. The model consists of multiple beams. Beams are connected by nodes. A single beam is defined by: start, end node length area, A elastic modulus, E area moment of inertia, I mass, m","title":"Model"},{"location":"model/#units","text":"The tool works unit independent. That means all values must be provided in compatible units - for instance: if length is in m then A must be in m 2 if mass is in kg and length in m , then gravity must be in m/s 2 and forces in N .","title":"Units"},{"location":"model/#coordinate-systems","text":"The overall coordinate system (CSYS) is shown below. The beam axis is x . Nodes have their own CSYS according to the below figure. Both systems overlay: x = u z = w rotation around y = phi","title":"Coordinate Systems"},{"location":"model/#beam-types","text":"Available beam types are: B_2DOF Bernoulli beam start and end node with 2 DOF: w , phi B_2DOF_II Bernoulli beam start and end node with 2 DOF: w , phi support of pDelta effects Best option is to use B_2DOF_II for all computations as allows to toggle the pDelta effect on and off without modification of the model definition. Note: Beam types cannot be mixed within a model.","title":"Beam Types"},{"location":"model/#mass-elements","text":"Masses are defined by: coordinate on the x-axis: \"x\" mass value: \"mass\" mass moment of inertia: \"mmoi\" Masses are assigned to the node closest to the specified x -coordinate. It is allowed to define multiple masses at the same location x ; their effect will be combined.","title":"Mass Elements"},{"location":"model/#springs","text":"Springs are defined by: coordinate on the x-axis: \"x\" translational spring value: \"w\" rotational spring value: \"phi\" Springs must be defined at exact node locations.","title":"Springs"},{"location":"model/#boundary-conditions","text":"Boundary conditions are defined by: coordinate on the x-axis: \"x\" value for: \"w\": 0.0 , \"phi\": 0.0 Boundary conditions must be defined at exact node locations. Values must be set to 0.0 , otherwise the BC will not be applied correctly. Note : It is allowed to define springs and BC for the same node ( x -location). However, the BC will always override the spring.","title":"Boundary Conditions"}]}